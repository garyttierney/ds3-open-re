// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `Frpg2RequestMessage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetServiceStatus {
    // message fields
    f1: ::std::option::Option<i32>,
    f2: ::protobuf::SingularField<::std::string::String>,
    steam_id: ::protobuf::SingularField<::std::string::String>,
    f4: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceStatus {
    fn default() -> &'a GetServiceStatus {
        <GetServiceStatus as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceStatus {
    pub fn new() -> GetServiceStatus {
        ::std::default::Default::default()
    }

    // required int32 f1 = 1;


    pub fn get_f1(&self) -> i32 {
        self.f1.unwrap_or(0)
    }
    pub fn clear_f1(&mut self) {
        self.f1 = ::std::option::Option::None;
    }

    pub fn has_f1(&self) -> bool {
        self.f1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f1(&mut self, v: i32) {
        self.f1 = ::std::option::Option::Some(v);
    }

    // optional string f2 = 2;


    pub fn get_f2(&self) -> &str {
        match self.f2.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_f2(&mut self) {
        self.f2.clear();
    }

    pub fn has_f2(&self) -> bool {
        self.f2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f2(&mut self, v: ::std::string::String) {
        self.f2 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f2(&mut self) -> &mut ::std::string::String {
        if self.f2.is_none() {
            self.f2.set_default();
        }
        self.f2.as_mut().unwrap()
    }

    // Take field
    pub fn take_f2(&mut self) -> ::std::string::String {
        self.f2.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string steam_id = 3;


    pub fn get_steam_id(&self) -> &str {
        match self.steam_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_steam_id(&mut self) {
        self.steam_id.clear();
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: ::std::string::String) {
        self.steam_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steam_id(&mut self) -> &mut ::std::string::String {
        if self.steam_id.is_none() {
            self.steam_id.set_default();
        }
        self.steam_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_steam_id(&mut self) -> ::std::string::String {
        self.steam_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 f4 = 4;


    pub fn get_f4(&self) -> u64 {
        self.f4.unwrap_or(0)
    }
    pub fn clear_f4(&mut self) {
        self.f4 = ::std::option::Option::None;
    }

    pub fn has_f4(&self) -> bool {
        self.f4.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f4(&mut self, v: u64) {
        self.f4 = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for GetServiceStatus {
    fn is_initialized(&self) -> bool {
        if self.f1.is_none() {
            return false;
        }
        if self.steam_id.is_none() {
            return false;
        }
        if self.f4.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.f1 = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.f2)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.steam_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.f4 = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.f1 {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.f2.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.steam_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.f4 {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.f1 {
            os.write_int32(1, v)?;
        }
        if let Some(ref v) = self.f2.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.steam_id.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.f4 {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceStatus {
        GetServiceStatus::new()
    }

    fn default_instance() -> &'static GetServiceStatus {
        static instance: ::protobuf::rt::LazyV2<GetServiceStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetServiceStatus::new)
    }
}

impl ::protobuf::Clear for GetServiceStatus {
    fn clear(&mut self) {
        self.f1 = ::std::option::Option::None;
        self.f2.clear();
        self.steam_id.clear();
        self.f4 = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RequestQueryLoginServerInfo {
    // message fields
    steam_id: ::protobuf::SingularField<::std::string::String>,
    f2: ::protobuf::SingularField<::std::string::String>,
    f3: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestQueryLoginServerInfo {
    fn default() -> &'a RequestQueryLoginServerInfo {
        <RequestQueryLoginServerInfo as ::protobuf::Message>::default_instance()
    }
}

impl RequestQueryLoginServerInfo {
    pub fn new() -> RequestQueryLoginServerInfo {
        ::std::default::Default::default()
    }

    // required string steam_id = 1;


    pub fn get_steam_id(&self) -> &str {
        match self.steam_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_steam_id(&mut self) {
        self.steam_id.clear();
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: ::std::string::String) {
        self.steam_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steam_id(&mut self) -> &mut ::std::string::String {
        if self.steam_id.is_none() {
            self.steam_id.set_default();
        }
        self.steam_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_steam_id(&mut self) -> ::std::string::String {
        self.steam_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string f2 = 2;


    pub fn get_f2(&self) -> &str {
        match self.f2.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_f2(&mut self) {
        self.f2.clear();
    }

    pub fn has_f2(&self) -> bool {
        self.f2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f2(&mut self, v: ::std::string::String) {
        self.f2 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f2(&mut self) -> &mut ::std::string::String {
        if self.f2.is_none() {
            self.f2.set_default();
        }
        self.f2.as_mut().unwrap()
    }

    // Take field
    pub fn take_f2(&mut self) -> ::std::string::String {
        self.f2.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 f3 = 3;


    pub fn get_f3(&self) -> u64 {
        self.f3.unwrap_or(0)
    }
    pub fn clear_f3(&mut self) {
        self.f3 = ::std::option::Option::None;
    }

    pub fn has_f3(&self) -> bool {
        self.f3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f3(&mut self, v: u64) {
        self.f3 = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RequestQueryLoginServerInfo {
    fn is_initialized(&self) -> bool {
        if self.steam_id.is_none() {
            return false;
        }
        if self.f3.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.steam_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.f2)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.f3 = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.steam_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.f2.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.f3 {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.steam_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.f2.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.f3 {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestQueryLoginServerInfo {
        RequestQueryLoginServerInfo::new()
    }

    fn default_instance() -> &'static RequestQueryLoginServerInfo {
        static instance: ::protobuf::rt::LazyV2<RequestQueryLoginServerInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestQueryLoginServerInfo::new)
    }
}

impl ::protobuf::Clear for RequestQueryLoginServerInfo {
    fn clear(&mut self) {
        self.steam_id.clear();
        self.f2.clear();
        self.f3 = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestQueryLoginServerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
