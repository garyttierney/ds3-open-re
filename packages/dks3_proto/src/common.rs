// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dks3/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct DateTime {
    // message fields
    year: ::std::option::Option<u32>,
    month: ::std::option::Option<u32>,
    day: ::std::option::Option<u32>,
    hours: ::std::option::Option<u32>,
    minutes: ::std::option::Option<u32>,
    seconds: ::std::option::Option<u32>,
    tzdiff: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateTime {
    fn default() -> &'a DateTime {
        <DateTime as ::protobuf::Message>::default_instance()
    }
}

impl DateTime {
    pub fn new() -> DateTime {
        ::std::default::Default::default()
    }

    // required uint32 year = 1;


    pub fn get_year(&self) -> u32 {
        self.year.unwrap_or(0)
    }
    pub fn clear_year(&mut self) {
        self.year = ::std::option::Option::None;
    }

    pub fn has_year(&self) -> bool {
        self.year.is_some()
    }

    // Param is passed by value, moved
    pub fn set_year(&mut self, v: u32) {
        self.year = ::std::option::Option::Some(v);
    }

    // required uint32 month = 2;


    pub fn get_month(&self) -> u32 {
        self.month.unwrap_or(0)
    }
    pub fn clear_month(&mut self) {
        self.month = ::std::option::Option::None;
    }

    pub fn has_month(&self) -> bool {
        self.month.is_some()
    }

    // Param is passed by value, moved
    pub fn set_month(&mut self, v: u32) {
        self.month = ::std::option::Option::Some(v);
    }

    // required uint32 day = 3;


    pub fn get_day(&self) -> u32 {
        self.day.unwrap_or(0)
    }
    pub fn clear_day(&mut self) {
        self.day = ::std::option::Option::None;
    }

    pub fn has_day(&self) -> bool {
        self.day.is_some()
    }

    // Param is passed by value, moved
    pub fn set_day(&mut self, v: u32) {
        self.day = ::std::option::Option::Some(v);
    }

    // required uint32 hours = 4;


    pub fn get_hours(&self) -> u32 {
        self.hours.unwrap_or(0)
    }
    pub fn clear_hours(&mut self) {
        self.hours = ::std::option::Option::None;
    }

    pub fn has_hours(&self) -> bool {
        self.hours.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hours(&mut self, v: u32) {
        self.hours = ::std::option::Option::Some(v);
    }

    // required uint32 minutes = 5;


    pub fn get_minutes(&self) -> u32 {
        self.minutes.unwrap_or(0)
    }
    pub fn clear_minutes(&mut self) {
        self.minutes = ::std::option::Option::None;
    }

    pub fn has_minutes(&self) -> bool {
        self.minutes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes(&mut self, v: u32) {
        self.minutes = ::std::option::Option::Some(v);
    }

    // required uint32 seconds = 6;


    pub fn get_seconds(&self) -> u32 {
        self.seconds.unwrap_or(0)
    }
    pub fn clear_seconds(&mut self) {
        self.seconds = ::std::option::Option::None;
    }

    pub fn has_seconds(&self) -> bool {
        self.seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds(&mut self, v: u32) {
        self.seconds = ::std::option::Option::Some(v);
    }

    // required uint32 tzdiff = 7;


    pub fn get_tzdiff(&self) -> u32 {
        self.tzdiff.unwrap_or(0)
    }
    pub fn clear_tzdiff(&mut self) {
        self.tzdiff = ::std::option::Option::None;
    }

    pub fn has_tzdiff(&self) -> bool {
        self.tzdiff.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tzdiff(&mut self, v: u32) {
        self.tzdiff = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DateTime {
    fn is_initialized(&self) -> bool {
        if self.year.is_none() {
            return false;
        }
        if self.month.is_none() {
            return false;
        }
        if self.day.is_none() {
            return false;
        }
        if self.hours.is_none() {
            return false;
        }
        if self.minutes.is_none() {
            return false;
        }
        if self.seconds.is_none() {
            return false;
        }
        if self.tzdiff.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.year = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hours = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minutes = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.seconds = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tzdiff = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.year {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.month {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.day {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.hours {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.minutes {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.seconds {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.tzdiff {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.year {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.month {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.day {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.hours {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.minutes {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.seconds {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.tzdiff {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateTime {
        DateTime::new()
    }

    fn default_instance() -> &'static DateTime {
        static instance: ::protobuf::rt::LazyV2<DateTime> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateTime::new)
    }
}

impl ::protobuf::Clear for DateTime {
    fn clear(&mut self) {
        self.year = ::std::option::Option::None;
        self.month = ::std::option::Option::None;
        self.day = ::std::option::Option::None;
        self.hours = ::std::option::Option::None;
        self.minutes = ::std::option::Option::None;
        self.seconds = ::std::option::Option::None;
        self.tzdiff = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
